# Automate The Boring Stuff With Python
# Chapter 3: Functions
# Practice Questions

# 1. Why are functions advantageous to have in your programs?
# ANS: Functions are a clean way to write code in compartmentalized blocks of
# code. This allows us to debug more easily and keeps variables self-contained
# within the function.

# 2. When does the code in a function execute: when the function is defined or
# when the function is called?
# ANS: The code in a function is executed when the function is CALLED.

# 3. What statement creates a function?
# ANS: The `def` statement defines a function.

# 4. What is the difference between a function and a function call?
# ANS: A function call is the application of the function. For example, when
# we type `random.randint(1,25)` we are calling the `randint()` function from
# the `random` library to generate a value. A function is the actual code that
# defines how the function operates.

# 5. How many global scopes are there in a Python program? How many local
# scopes?
# ANS: There is only one (1) global scope in a Python program, but there can
# be many local scopes depending on how many functions are called.

# 6. What happens to variables in a local scope when the function call returns?
# ANS: Those variables are destroyed.

# 7. What is a return value? Can a return value be part of an expression?
# ANS: A return value is the "output" of a function (what the function returns
# after the function completes its execution). This return value CAN be used
# as part of an expression.

# 8. If a function does not have a return statement, what is the return value
# of a call to that function?
# ANS: The return value will be `None`.

# 9. How can you force a variable in a function to refer to the global variable?
# ANS: By using the `global` statement.

#10. What is the data type of `None`?
# ANS: The data type of `None` is `NoneType`

# 11. What does the `import areallyourpetsnamederic` statement do?
# ANS: This statement imports, or allows us to have access to, the library (or
# module) `areallyourpetsnamederic`, including the use of all functions,
# classes, and attributes.

# 12. If you had a function named `bacon()` in a module named `spam`, how
# would you call it after importing `spam`?
# ANS: There are a couple of ways - A. If we simply `import spam`, then we
# would call `spam.bacon()`. B. If we use `from spam import bacon`, we could
# just refer to the function as `bacon()`.

# 13. How can you prevent a program from crashing when it gets an error?
# ANS: Implement a `try` and `except` clause to handle the possible errors.

# 14. What goes in the `try` clause? What goes in the `except` clause?
# ANS: In the `try` clause, we write the code we would like to run (code that
# might cause an error); in the `except` clause, we write the possible error(s)
# and what should be executed in the event such an error is encountered.
